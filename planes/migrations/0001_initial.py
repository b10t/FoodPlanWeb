# Generated by Django 4.1.2 on 2022-10-05 10:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('username', models.CharField(max_length=150, verbose_name='имя')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, unique=True, verbose_name='Наименование аллергии')),
                ('sort_order', models.IntegerField(default=0, verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Аллергия',
                'verbose_name_plural': 'Аллергии',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, verbose_name='Наименование')),
                ('description', models.CharField(blank=True, max_length=2048, verbose_name='Описание')),
                ('recipe', models.CharField(blank=True, max_length=2048, verbose_name='Рецепт приготовления')),
                ('calories', models.CharField(default='', max_length=20, verbose_name='Калорийность')),
                ('picture', models.URLField(max_length=4096, verbose_name='Ссылка на картинку')),
            ],
            options={
                'verbose_name': 'Блюдо',
                'verbose_name_plural': 'Блюда',
            },
        ),
        migrations.CreateModel(
            name='MenuType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, unique=True, verbose_name='Наименование меню')),
            ],
            options={
                'verbose_name': 'Тип меню',
                'verbose_name_plural': 'Типы меню',
            },
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_meals', models.IntegerField(default=1, verbose_name='Количество приёмов пищи за день')),
                ('number_of_person', models.IntegerField(default=1, verbose_name='Количество персон')),
                ('duration', models.IntegerField(default=1, verbose_name='Длительность подписки, мес.')),
                ('subscription_paid', models.BooleanField(default=False, verbose_name='Подписка оплачена')),
                ('allergy', models.ManyToManyField(to='planes.allergy', verbose_name='Аллергии')),
                ('menu_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='subscribe_menu_type', to='planes.menutype', verbose_name='Тип меню')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribe_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписка',
            },
        ),
        migrations.CreateModel(
            name='DishIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, verbose_name='Ингредиент')),
                ('amount', models.CharField(default='', max_length=20, verbose_name='Количество')),
                ('unit', models.CharField(default='', max_length=255, verbose_name='Единица измерения')),
                ('allergy', models.ManyToManyField(related_name='ingredient_allergy', to='planes.allergy')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_dish', to='planes.dish', verbose_name='Блюдо')),
            ],
            options={
                'verbose_name': 'Ингредиент блюда',
                'verbose_name_plural': 'Ингредиенты блюд',
            },
        ),
        migrations.AddField(
            model_name='dish',
            name='menu_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dish_menu_type', to='planes.menutype', verbose_name='Тип меню'),
        ),
    ]
